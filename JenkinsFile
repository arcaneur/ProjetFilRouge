pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_DIR = "/opt/flask-mariadb-haproxy" // Adapt this path if needed
    }

    stages {

        stage('Cloner le d√©p√¥t') {
            steps {
                // Si ton code source est dans un repository git
                git 'https://ton-depot-git.com/ton-projet.git'
            }
        }

        stage('D√©marrer les services Docker') {
            steps {
                script {
                    echo "üîß Construction des images Docker et d√©marrage des services"
                    sh "docker-compose -f ${DOCKER_COMPOSE_DIR}/docker-compose.yml build"
                    sh "docker-compose -f ${DOCKER_COMPOSE_DIR}/docker-compose.yml up -d"
                }
            }
        }

        stage('V√©rifier les conteneurs') {
            steps {
                script {
                    echo "üõ†Ô∏è V√©rification des conteneurs"
                    // V√©rifie si les conteneurs sont en marche
                    sh "docker ps | grep mariadb"
                    sh "docker ps | grep flask_app1"
                    sh "docker ps | grep flask_app2"
                    sh "docker ps | grep haproxy"
                }
            }
        }

        stage('Ex√©cuter les tests unitaires') {
            steps {
                script {
                    echo "üß™ Lancement des tests unitaires pour Flask"
                    // Teste flask_app1
                    sh "docker exec flask_app1 pytest"
                    // Teste flask_app2
                    sh "docker exec flask_app2 pytest"
                }
            }
        }

    }

    post {
        always {
            stage('Nettoyage') {
                steps {
                    script {
                        echo "üßπ Nettoyage : Arr√™t des conteneurs"
                        sh "docker-compose -f ${DOCKER_COMPOSE_DIR}/docker-compose.yml down"
                    }
                }
            }
        }

        success {
            echo "‚úÖ Pipeline termin√© avec succ√®s !"
        }

        failure {
            echo "‚ùå Pipeline √©chou√©, veuillez v√©rifier les logs."
        }
    }
}
